openapi: 3.0.3
info:
  title: TimeTrack API
  description: |
    API pour l'application TimeTrack permettant aux utilisateurs de suivre et analyser le temps passé sur leurs activités quotidiennes.
    
    Cette API RESTful fournit toutes les fonctionnalités nécessaires pour gérer les utilisateurs, les types d'activités, les sessions et les statistiques.
  version: 1.0.0
  contact:
    name: Support TimeTrack
    email: support@timetrack.com
    url: https://www.timetrack.com/support
  
servers:
  - url: https://api.timetrack.com/v1
    description: Serveur de production
  - url: https://staging-api.timetrack.com/v1
    description: Serveur de staging

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Utilisez le token JWT obtenu lors de la connexion dans l'en-tête Authorization
      
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: Code d'erreur HTTP ou code d'erreur spécifique à l'application
        message:
          type: string
          description: Message d'erreur explicatif
        details:
          type: object
          description: Détails supplémentaires sur l'erreur (optionnel)
      required:
        - code
        - message
        
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - email
        - username
        - createdAt
        - updatedAt
        
    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
          minLength: 3
          maxLength: 50
        password:
          type: string
          format: password
          minLength: 8
          description: Doit contenir au moins 8 caractères, incluant au moins une lettre majuscule, une lettre minuscule et un chiffre
      required:
        - email
        - username
        - password
        
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
        
    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          description: Durée de validité du token en secondes
      required:
        - accessToken
        - refreshToken
        - expiresIn
        
    ActivityType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Lecture"
        color:
          type: string
          description: Code couleur hexadécimal
          example: "#FF5733"
        userId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - userId
        - createdAt
        - updatedAt
        
    ActivityTypeCreate:
      type: object
      properties:
        name:
          type: string
          example: "Lecture"
          minLength: 1
          maxLength: 50
        color:
          type: string
          description: Code couleur hexadécimal
          example: "#FF5733"
          pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
      required:
        - name
        - color
        
    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
        activityTypeId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        duration:
          type: integer
          description: Durée en minutes
        note:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Liste des tags associés à cette session
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - activityTypeId
        - userId
        - startTime
        - endTime
        - duration
        - createdAt
        - updatedAt
        
    SessionCreate:
      type: object
      properties:
        activityTypeId:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        note:
          type: string
          maxLength: 500
        tagIds:
          type: array
          items:
            type: string
            format: uuid
          description: Liste des identifiants de tags à associer à cette session
      required:
        - activityTypeId
        - startTime
        - endTime
        
    SessionSummary:
      type: object
      properties:
        activityTypeId:
          type: string
          format: uuid
        activityName:
          type: string
        totalDuration:
          type: integer
          description: Durée totale en minutes
        sessionCount:
          type: integer
          description: Nombre de sessions
        averageDuration:
          type: integer
          description: Durée moyenne par session en minutes
      required:
        - activityTypeId
        - activityName
        - totalDuration
        - sessionCount
        
    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Important"
        userId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - userId
        - createdAt
        - updatedAt
        
    TagCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 30
      required:
        - name

paths:
  /register:
    post:
      summary: Inscription d'un nouvel utilisateur
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email déjà utilisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /login:
    post:
      summary: Connexion utilisateur
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              example:
                accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                expiresIn: 3600
        '401':
          description: Identifiants invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /logout:
    post:
      summary: Déconnexion utilisateur
      tags:
        - Authentification
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Déconnexion réussie
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /refresh-token:
    post:
      summary: Rafraîchir le token d'accès
      description: Permet d'obtenir un nouveau token d'accès sans avoir à se reconnecter
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
      responses:
        '200':
          description: Token rafraîchi avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Token invalide ou expiré
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /me:
    get:
      summary: Obtenir les informations de l'utilisateur connecté
      description: Récupère le profil de l'utilisateur actuellement authentifié
      tags:
        - Utilisateurs
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Informations de l'utilisateur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    put:
      summary: Mettre à jour les informations de l'utilisateur connecté
      tags:
        - Utilisateurs
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Informations mises à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /me/password:
    put:
      summary: Modifier le mot de passe de l'utilisateur connecté
      description: Permet à l'utilisateur de changer son mot de passe
      tags:
        - Utilisateurs
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  format: password
                  description: Mot de passe actuel pour vérification
                newPassword:
                  type: string
                  format: password
                  minLength: 8
                  description: Nouveau mot de passe (doit contenir au moins 8 caractères, incluant au moins une lettre majuscule, une lettre minuscule et un chiffre)
              required:
                - currentPassword
                - newPassword
      responses:
        '204':
          description: Mot de passe modifié avec succès
        '400':
          description: Données invalides ou nouveau mot de passe trop faible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Mot de passe actuel incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /activity-types:
    get:
      summary: Obtenir tous les types d'activités de l'utilisateur
      tags:
        - Types d'activités
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Liste des types d'activités
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityType'
              example:
                - id: "550e8400-e29b-41d4-a716-446655440000"
                  name: "Lecture"
                  color: "#FF5733"
                  userId: "550e8400-e29b-41d4-a716-446655440001"
                  createdAt: "2023-01-15T14:30:00Z"
                  updatedAt: "2023-01-15T14:30:00Z"
                - id: "550e8400-e29b-41d4-a716-446655440002"
                  name: "Sport"
                  color: "#33FF57"
                  userId: "550e8400-e29b-41d4-a716-446655440001"
                  createdAt: "2023-01-16T10:15:00Z"
                  updatedAt: "2023-01-16T10:15:00Z"
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    post:
      summary: Créer un nouveau type d'activité
      tags:
        - Types d'activités
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityTypeCreate'
      responses:
        '201':
          description: Type d'activité créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityType'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /activity-types/{activityTypeId}:
    parameters:
      - name: activityTypeId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Obtenir un type d'activité spécifique
      tags:
        - Types d'activités
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Type d'activité trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityType'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Accès interdit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Type d'activité non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    put:
      summary: Mettre à jour un type d'activité
      tags:
        - Types d'activités
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityTypeCreate'
      responses:
        '200':
          description: Type d'activité mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityType'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Accès interdit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Type d'activité non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    delete:
      summary: Supprimer un type d'activité
      tags:
        - Types d'activités
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Type d'activité supprimé avec succès
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Accès interdit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Type d'activité non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /sessions:
    get:
      summary: Obtenir toutes les sessions de l'utilisateur
      description: Récupère la liste des sessions avec possibilité de filtrage par date et type d'activité
      tags:
        - Sessions
      security:
        - BearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Date de début pour filtrer les sessions (format YYYY-MM-DD)
          example: "2023-01-01"
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: Date de fin pour filtrer les sessions (format YYYY-MM-DD)
          example: "2023-01-31"
        - name: activityTypeId
          in: query
          schema:
            type: string
            format: uuid
          description: Filtrer par type d'activité
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Nombre maximum de sessions à retourner
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Index de départ pour la pagination
      responses:
        '200':
          description: Liste des sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    post:
      summary: Créer une nouvelle session
      tags:
        - Sessions
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreate'
      responses:
        '201':
          description: Session créée avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Type d'activité non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /sessions/{sessionId}:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Identifiant unique de la session
    get:
      summary: Obtenir une session spécifique
      description: Récupère les détails d'une session avec ses tags associés
      tags:
        - Sessions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Session trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
              example:
                id: "550e8400-e29b-41d4-a716-446655440020"
                activityTypeId: "550e8400-e29b-41d4-a716-446655440000"
                userId: "550e8400-e29b-41d4-a716-446655440001"
                startTime: "2023-01-15T14:30:00Z"
                endTime: "2023-01-15T15:30:00Z"
                duration: 60
                note: "Lecture du livre 'Clean Code'"
                tags:
                  - id: "550e8400-e29b-41d4-a716-446655440010"
                    name: "Important"
                    userId: "550e8400-e29b-41d4-a716-446655440001"
                    createdAt: "2023-01-15T14:30:00Z"
                    updatedAt: "2023-01-15T14:30:00Z"
                createdAt: "2023-01-15T14:30:00Z"
                updatedAt: "2023-01-15T14:30:00Z"
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Accès interdit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Session non trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    put:
      summary: Mettre à jour une session
      tags:
        - Sessions
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreate'
      responses:
        '200':
          description: Session mise à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Accès interdit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Session non trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    delete:
      summary: Supprimer une session
      tags:
        - Sessions
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Session supprimée avec succès
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Accès interdit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Session non trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /statistics:
    get:
      summary: Obtenir des statistiques sur les sessions de l'utilisateur
      description: Fournit des statistiques agrégées sur le temps passé par activité selon différentes périodes
      tags:
        - Statistiques
      security:
        - BearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Date de début pour filtrer les sessions (format YYYY-MM-DD)
          required: true
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: Date de fin pour filtrer les sessions (format YYYY-MM-DD)
          required: true
        - name: groupBy
          in: query
          schema:
            type: string
            enum: [day, week, month, activity]
          description: Regrouper les statistiques par jour, semaine, mois ou activité
          required: true
      responses:
        '200':
          description: Statistiques des sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SessionSummary'
              example:
                - activityTypeId: "550e8400-e29b-41d4-a716-446655440000"
                  activityName: "Lecture"
                  totalDuration: 240
                  sessionCount: 3
                - activityTypeId: "550e8400-e29b-41d4-a716-446655440002"
                  activityName: "Sport"
                  totalDuration: 180
                  sessionCount: 2
        '400':
          description: Paramètres invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /tags:
    get:
      summary: Obtenir tous les tags de l'utilisateur
      description: Récupère la liste des tags créés par l'utilisateur
      tags:
        - Tags
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Liste des tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
              example:
                - id: "550e8400-e29b-41d4-a716-446655440010"
                  name: "Important"
                  userId: "550e8400-e29b-41d4-a716-446655440001"
                  createdAt: "2023-01-15T14:30:00Z"
                  updatedAt: "2023-01-15T14:30:00Z"
                - id: "550e8400-e29b-41d4-a716-446655440011"
                  name: "Personnel"
                  userId: "550e8400-e29b-41d4-a716-446655440001"
                  createdAt: "2023-01-16T10:15:00Z"
                  updatedAt: "2023-01-16T10:15:00Z"
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    post:
      summary: Créer un nouveau tag
      description: Permet à l'utilisateur de créer un nouveau tag pour catégoriser ses activités
      tags:
        - Tags
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
      responses:
        '201':
          description: Tag créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /sessions/{sessionId}/tags:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Identifiant unique de la session
    get:
      summary: Obtenir tous les tags associés à une session
      description: Récupère la liste des tags associés à une session spécifique
      tags:
        - Sessions
        - Tags
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Liste des tags associés à la session
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Accès interdit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Session non trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    post:
      summary: Associer des tags à une session
      description: Permet d'associer un ou plusieurs tags à une session existante
      tags:
        - Sessions
        - Tags
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tagIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Liste des identifiants de tags à associer
              required:
                - tagIds
      responses:
        '200':
          description: Tags associés avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Accès interdit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Session ou tag non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /sessions/{sessionId}/tags/{tagId}:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Identifiant unique de la session
      - name: tagId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Identifiant unique du tag
    delete:
      summary: Dissocier un tag d'une session
      description: Supprime l'association entre un tag et une session
      tags:
        - Sessions
        - Tags
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Association supprimée avec succès
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Accès interdit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Session, tag ou association non trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /tags/{tagId}:
    parameters:
      - name: tagId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Identifiant unique du tag
    get:
      summary: Obtenir un tag spécifique
      description: Récupère les détails d'un tag spécifique
      tags:
        - Tags
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Tag trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Accès interdit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tag non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    put:
      summary: Mettre à jour un tag
      description: Permet de modifier le nom d'un tag existant
      tags:
        - Tags
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
      responses:
        '200':
          description: Tag mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Accès interdit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tag non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    delete:
      summary: Supprimer un tag
      description: Supprime un tag existant
      tags:
        - Tags
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Tag supprimé avec succès
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Accès interdit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tag non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'